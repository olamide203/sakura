/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Portfolio = {
  _id: string;
  _type: "portfolio";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  about: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  socialLinks: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "social";
  }>;
  projects: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "project";
  }>;
  experiences: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "experience";
  }>;
  skills: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "technology";
  }>;
  metadata: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "siteMeta";
  };
  publishedAt: string;
};

export type Social = {
  _id: string;
  _type: "social";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  account?: "x" | "github" | "linkedIn" | "instagram";
  url: string;
  username: string;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  technologies: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "technology";
  }>;
  publishedAt: string;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  repository?: string;
  link: string;
};

export type Technology = {
  _id: string;
  _type: "technology";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  logo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  publishedAt: string;
  link?: string;
};

export type Experience = {
  _id: string;
  _type: "experience";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  jobTitle: string;
  company: string;
  companyURL?: string;
  startDate: string;
  endDate?: string;
  isCurrentJob?: boolean;
  achievements: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  skills: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "technology";
  }>;
  publishedAt: string;
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
      listItem?: "bullet";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }
>;

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  publishedAt?: string;
  body?: BlockContent;
  metadata?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "siteMeta";
  };
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type Google = {
  _type: "google";
  analyticsId?: string;
  SiteVerificationId?: string;
};

export type SiteSettings = {
  _type: "siteSettings";
  isPwa?: boolean;
  isGoogleAnalyticsEnabled?: boolean;
};

export type Meta = {
  _type: "meta";
  title?: string;
  description?: string;
};

export type OpenGraph = {
  _type: "openGraph";
  ogTitle?: string;
  url: string;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  ogType?: "website" | "article" | "blog" | "video" | "image";
  siteName?: string;
  ogDescription?: string;
  locale?: "en-US" | "en-GB" | "fr-FR";
};

export type SiteMeta = {
  _id: string;
  _type: "siteMeta";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  isPwa?: boolean;
  isGoogleAnalyticsEnabled?: boolean;
  ogTitle?: string;
  url: string;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  ogType?: "website" | "article" | "blog" | "video" | "image";
  siteName?: string;
  ogDescription?: string;
  locale?: "en-US" | "en-GB" | "fr-FR";
  analyticsId?: string;
  SiteVerificationId?: string;
  manifest?: Manifest;
};

export type Manifest = {
  _type: "manifest";
  short_name?: string;
  start_url?: string;
  theme_color?: string;
  background_color?: string;
  display?: "browser" | "fullscreen" | "minimal-ui" | "standalone";
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Portfolio
  | Social
  | Project
  | Technology
  | Experience
  | BlockContent
  | Category
  | Post
  | Author
  | Slug
  | Google
  | SiteSettings
  | Meta
  | OpenGraph
  | SiteMeta
  | Manifest
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../frontend/app/sanity.ts
// Variable: portfolioQuery
// Query: *[_type=="portfolio"][0]{  ...,  mainImage {     ...,    asset->{      ...,    },  },  about[] {    ...,    markDefs[]-> {      ...,      "slug": select(_type == "internalLink" => @.reference->slug)    }  },  socialLinks[]-> {    account,    url,    username,    _id  },  projects[]-> {    ...,    mainImage {       ...,      asset->{ ..., }    },    description[] {      ...,      markDefs[]-> {        ...,        "slug": select(_type == "internalLink" => @.reference->slug)      }    },    technologies[]-> {      name,      _id     }  },  "experiences": *[_type == "experience"] | order(publishedAt desc){    ...,    skills[]-> {      name,      _id      },      }  ,  skills[]-> {    name,    link,    _id,    logo {      asset->{        ...,      }    }  },  metadata-> {    ...,    image {     ...,    asset->{      ...,    },  },  }}
export type PortfolioQueryResult = {
  _id: string;
  _type: "portfolio";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  role: string;
  mainImage: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  about: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<null> | null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  socialLinks: Array<{
    account: "github" | "instagram" | "linkedIn" | "x" | null;
    url: string;
    username: string;
    _id: string;
  }>;
  projects: Array<{
    _id: string;
    _type: "project";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title: string;
    slug: Slug;
    mainImage: {
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    technologies: Array<{
      name: string;
      _id: string;
    }>;
    publishedAt: string;
    description: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs: Array<null> | null;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    repository?: string;
    link: string;
  }>;
  experiences: Array<{
    _id: string;
    _type: "experience";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    jobTitle: string;
    company: string;
    companyURL?: string;
    startDate: string;
    endDate?: string;
    isCurrentJob?: boolean;
    achievements: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    skills: Array<{
      name: string;
      _id: string;
    }>;
    publishedAt: string;
  }>;
  skills: Array<{
    name: string;
    link: string | null;
    _id: string;
    logo: {
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
    };
  }>;
  metadata: {
    _id: string;
    _type: "siteMeta";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    description?: string;
    isPwa?: boolean;
    isGoogleAnalyticsEnabled?: boolean;
    ogTitle?: string;
    url: string;
    image: {
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    ogType?: "article" | "blog" | "image" | "video" | "website";
    siteName?: string;
    ogDescription?: string;
    locale?: "en-GB" | "en-US" | "fr-FR";
    analyticsId?: string;
    SiteVerificationId?: string;
    manifest?: Manifest;
  };
  publishedAt: string;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '*[_type=="portfolio"][0]{\n  ...,\n  mainImage { \n    ...,\n    asset->{\n      ...,\n    },\n  },\n  about[] {\n    ...,\n    markDefs[]-> {\n      ...,\n      "slug": select(_type == "internalLink" => @.reference->slug)\n    }\n  },\n  socialLinks[]-> {\n    account,\n    url,\n    username,\n    _id\n  },\n  projects[]-> {\n    ...,\n    mainImage { \n      ...,\n      asset->{ ..., }\n    },\n    description[] {\n      ...,\n      markDefs[]-> {\n        ...,\n        "slug": select(_type == "internalLink" => @.reference->slug)\n      }\n    },\n    technologies[]-> {\n      name,\n      _id \n    }\n  },\n  "experiences": *[_type == "experience"] | order(publishedAt desc){\n    ...,\n    skills[]-> {\n      name,\n      _id\n      },\n      }  ,\n  skills[]-> {\n    name,\n    link,\n    _id,\n    logo {\n      asset->{\n        ...,\n      }\n    }\n  },\n  metadata-> {\n    ...,\n    image { \n    ...,\n    asset->{\n      ...,\n    },\n  },\n  }\n}': PortfolioQueryResult;
  }
}
